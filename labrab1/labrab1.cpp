// labrab1.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include "taskOne.h"
#include "taskTwo.h"
#include "taskExtra.h"


/*
 
 C                 ----                C++
 (Defined in header <string.h>) - (Defined in header <cstring>)
 strlen - strlen -  возвращает длину строки

 strcpy - strcpy - копирует содержимое одной строки в другую.

 strcmp - std::strcmp - сравнивает две строки и возвращает результат сравнения.

 strcat - strcat - объединяет две строки путем добавления содержимого одной строки в конец другой.

  someString[index] - в C++ можно получить символ строки по индексу, используя оператор [].

  strcat как сверху - push_back добавляет символ в конец строки.

  замена через размер строки последнего символа на "\0" - pop_back

  Главная разница между строками в C и C++ заключается в том, что в C строки представлены как массивы символов,
  а в C++ есть специальный класс string, который предоставляет удобные методы для работы со строками.
  Строки в C++ могут быть динамическими и иметь переменную длину, в отличие от строк в C, которые имеют фиксированную длину.
  Класс string также обеспечивает автоматическое управление памятью для строк, что делает работу с ними более безопасной и удобной.



  int *ptr = (int*)malloc(sizeof(int)) - int *ptr = new int;
  int *ptrArr = (int*)malloc(sizeof(int)*N) - int *ptrArr = new int[N];
  free(ptr) - delete ptr;
  free(ptrArr) - delete[] ptrArr

  Если вы забудете освободить выделенную память, это может привести к утечкам памяти,
  когда память не будет доступна для последующего использования и будет занимать место в памяти.
  Попытка освободить одну и ту же выделенную память дважды может привести к неопределенному поведению программы.
  C++ не предоставляет прямых средств для освобождения "невыделенной" памяти. Попытка освободить такую
  память также может вызвать ошибку во время выполнения или привести к неопределенным последствиям.
 */

int main()
{
	system("chcp 1251");
	system("cls");
	setlocale(LC_ALL, "rus");

	std::cout << "Guten Tag! \n";

	taskOneB();

	taskTwo();

	extraTask();
	return 0;
}